{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "8a1aec75-e403-4e69-84ad-da2fa3652758",
    "code": "(()=>{\n  \n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // simple multi-page: INPUT.data.req.path\n      \n      // let htmlHeader = await renderPartial();\n      \n      let htmlMenu = '';\n      let htmlMain1 = '';\n      let htmlMain2 = '';\n      \nlet menuMd = `\n- [Goals](#goals)  \n- [Technical Roadmap](#technical-roadmap)  \n- [Strategy](#strategy)  \n- [Contact](#contact)  \n`\n\nlet md1 = `\n### About   \n\n---- \n`;\nlet md2 = `\n\n### Goals      \n\nEvery person, business, and devices should have a Second, acting as an interface and communication assistant, making Human-Machine-Machine communication more efficient and effective. \n\n\n### Technical Roadmap \n\n1. __Simple building blocks__  \nFoundation for a \"communication OS\" that is infinitely upgradeable and can handle any data  \n1. __Collaboration and communication__  \nTooling for sharing apps and data and collaborative improvement of underlying infrastructure  \n1. __Personalization__  \nConsumerization of apps and sharing   \n\n\n#### Stage 1 (Foundation) \n\n~~New filesystem (node = file+directory+validation)~~  \n~~New routing layer~~  \n~~Multi-platform support (cloud, browser, iOS/Android, RPi3)~~  \n\n\n#### Stage 2 (App Platform) \n\n~~Cloud Default App~~  \n~~Browser app: app store and editor~~  \nBrowser/Mobile apps: social sharing (private, customizable twitter/fb)  \nBrowser/Mobile/IoT apps: automation  \nMobile/Iot development guides  \n\n\n#### Stage 3 (Scalability and Adoption) \n\nPlatform change support (platform-as-upgradeable)  \nSecurity reviews  \n\n\n\n### Strategy    \n\nJoel Spolsky wrote [smart companies try to commoditize their products’ complements](https://www.joelonsoftware.com/2002/06/12/strategy-letter-v/). \n- IBM’s goal was to commoditize the add-in market  \n- Microsoft’s goal was to commoditize the PC market  \n- Second's goal is to __commoditize interfaces (UIs and APIs)__ \n\nSecond aims to encourage participation in information sharing. It should be easy for anyone to fetch data and customize their interactions with everything electronic. \n\n\n\n### Contact \n\nRequests may be directed to nick@getasecond.com \n\n\n---- \n\nIcon created by iconomania from Noun Project\n\n----  \n\n`\n      try {\n        \n        let marked = universe.require('marked');\n        htmlMenu = marked(menuMd);\n        htmlMain1 = marked(md1);\n        htmlMain2 = marked(md2);\n        \n        \n      }catch(err){\n        // marked doesn't exist yet \n        // - requires installation! \n        // - TODO: move to \"dependencies\" on code, install at runtime \n        \n        if(universe.checkPackage('marked').errorInstalling){\n          htmlMain1 = 'FAILED installing package!';\n        } else {\n          htmlMain1 = 'Please wait while packages are installed';\n          \n          (async function(){\n            let installed = await universe.installPackage('marked');\n            if(installed){\n              console.log('Installed!');\n            } else {\n              console.log('Failed installation');\n            }\n          })()\n        }\n        \n      }\n      \n      \n      let page = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <title>Second</title>\n            \n            <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n              \n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\" />\n            \n            <style>\n              .container {\n                max-width: 960px;\n              }\n            </style>\n            \n          </head>\n          <body>\n                  \n            \n            <div class=\"container\">\n              <br />\n              <div class=\"links\">\n                <a href=\"/\">Home</a>\n                &nbsp;|&nbsp;\n                <a href=\"/about\">About</a>\n                &nbsp;|&nbsp;\n                <a href=\"/developers\">Developers</a>\n                &nbsp;|&nbsp;\n                <a href=\"/appstore\">Store</a>\n              </div>\n              <hr />\n            </div>\n            \n            <div class=\"container\">\n              <div class=\"content\">\n                ${htmlMain1}\n              </div>\n              <div class=\"columns\">\n                <div class=\"column is-3\">\n                  <div class=\"content\">\n                    ${htmlMenu}\n                  </div>\n                </div>\n                <div class=\"column is-9\">\n                  <div class=\"content\">\n                    ${htmlMain2}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n          </body>\n        </html>\n      `;\n\n      await universe.httpResponse('send', page); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}