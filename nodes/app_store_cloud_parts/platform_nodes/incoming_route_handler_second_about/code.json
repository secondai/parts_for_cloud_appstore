{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "8a1aec75-e403-4e69-84ad-da2fa3652758",
    "code": "(()=>{\n  \n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // simple multi-page: INPUT.data.req.path\n      \n      // let htmlHeader = await renderPartial();\n      \n      let htmlMenu = '';\n      let htmlMain1 = '';\n      let htmlMain2 = '';\n      \nlet menuMd = `\n- [Goals](#goals)  \n- [Technical Roadmap](#technical-roadmap)  \n- [Strategy](#strategy)  \n- [Contact](#contact)  \n`\n\nlet md1 = `\n### About   \n\n---- \n`;\nlet md2 = `\n\n### Goals      \n\n__1a.__ Break the relationships between publishing and viewing data that have lead to heavily centralized services and walled gardens.  \n__1b.__ Every person, business, and device has a Second acting as an interface and communication assistant, making Human-Machine-Machine communication more efficient and effective. \n\n\n### Technical Roadmap \n\n1. __Simple building blocks__  \nFoundation for a \"communication OS\" that is infinitely upgradeable and can handle any data  \n1. __Collaboration and communication__  \nTooling for sharing apps and data and collaborative improvement of underlying infrastructure  \n1. __Personalization__  \nConsumerization of apps and sharing   \n\n\n#### Stage 1 (Foundation) \n\n~~New filesystem (node = file+directory+validation)~~  \n~~New routing layer~~  \n~~Multi-platform support (cloud, browser, iOS/Android, RPi3)~~  \n\n\n#### Stage 2 (App Platform) \n\n~~Cloud Default App~~  \n~~Browser app: app store and editor~~  \nBrowser/Mobile apps: social sharing (private, customizable twitter/fb)  \nBrowser/Mobile/IoT apps: automation  \nMobile/Iot development guides  \n\n\n#### Stage 3 (Scalability and Adoption) \n\nPlatform change support (platform-as-upgradeable)  \nSecurity reviews  \n\n\n\n### Strategy    \n\nToday, publishing information requires the publisher (you) to also think about how the data will be viewed. \n\nAll of the economical, social, and professional momentum for centralized publishing services (facebook, google, etc) comes from a [walled garden](https://www.techopedia.com/definition/2541/walled-garden-technology) business model where they own the data and user experience, and wind up monetizing through advertising and selling user data. \n\nThe easy choice, of using a centralized service that provides a common UI for accessing the data, is most often made...it is economically, socially, professionally less awkward to use; it is the equivalent of \"nobody ever got fired for buying IBM.\"   \n\nSecond's strategy to break walled gardens is to disconnect data publishing from viewing, by making it easy to publish data that is discoverable and accessible, and providing better user interfaces that can be customized and shared. \n\nIndividuals and businesses will want to use a Second because it provides an easier and more personalized experience than any centralized service. \n\nJoel Spolsky [wrote](https://www.joelonsoftware.com/2002/06/12/strategy-letter-v/) about commodizating complements.  \n- IBM’s goal was to commoditize the add-in market  \n- Microsoft’s goal was to commoditize the PC market  \n- Second's goal is to __commoditize interfaces (UIs and APIs)__ \n\nSecond aims to encourage participation in information sharing. It should be easy for anyone to fetch data and customize their interactions with everything electronic. \n\n\n\n### Contact \n\nRequests may be directed to nick@getasecond.com \n\n\n---- \n\nIcon created by iconomania from Noun Project\n\n----  \n\n`\n\n      // Load partial\n      let headerHtml = '';\n      try {\n        let partialNodes = await universe.searchMemory({\n          cache: 'html_partials_header',\n          filter: {\n            sqlFilter: {\n              // nodeId: null // OLD: root-level\n              type: 'html_partial:Qmslfkj299023fjfs',\n              data: {\n                key: 'header'\n              }\n            },\n          }\n        });\n        let headerHtmlCodeNode = partialNodes[0].nodes.find(node=>{return node.type == 'code:0.0.1:local:32498h32f2'});\n        let htmlResultNode = await universe.runNodeCodeInVM({\n          codeNode: headerHtmlCodeNode,\n          dataNode: {}\n        });\n        headerHtml = htmlResultNode.data.html;\n      }catch(err){\n        console.error('Failed partial:', err);\n      }\n      \n      try {\n        \n        let marked = universe.require('marked');\n        htmlMenu = marked(menuMd);\n        htmlMain1 = marked(md1);\n        htmlMain2 = marked(md2);\n        \n        \n      }catch(err){\n        // marked doesn't exist yet \n        // - requires installation! \n        // - TODO: move to \"dependencies\" on code, install at runtime \n        \n        if(universe.checkPackage('marked').errorInstalling){\n          htmlMain1 = 'FAILED installing package!';\n        } else {\n          htmlMain1 = 'Please wait while packages are installed';\n          \n          (async function(){\n            let installed = await universe.installPackage('marked');\n            if(installed){\n              console.log('Installed!');\n            } else {\n              console.log('Failed installation');\n            }\n          })()\n        }\n        \n      }\n      \n      \n      let page = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <title>Second</title>\n            \n            <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n              \n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\" />\n            \n            <style>\n              .container {\n                max-width: 960px;\n              }\n            </style>\n            \n          </head>\n          <body>\n                  \n            ${headerHtml}\n            \n            <div class=\"container\">\n              <div class=\"content\">\n                ${htmlMain1}\n              </div>\n              <div class=\"columns\">\n                <div class=\"column is-3\">\n                  <div class=\"content\">\n                    ${htmlMenu}\n                  </div>\n                </div>\n                <div class=\"column is-9\">\n                  <div class=\"content\">\n                    ${htmlMain2}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n          </body>\n        </html>\n      `;\n\n      await universe.httpResponse('send', page); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}