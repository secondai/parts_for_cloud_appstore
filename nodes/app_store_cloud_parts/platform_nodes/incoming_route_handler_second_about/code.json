{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "8a1aec75-e403-4e69-84ad-da2fa3652758",
    "code": "(()=>{\n  \n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // simple multi-page: INPUT.data.req.path\n      \n      // let htmlHeader = await renderPartial();\n      \n      let htmlMenu = '';\n      let htmlMain = '';\n      \nlet menuMd = `\n- [Technical Roadmap](#technical-roadmap)  \n- [Team](#team)  \n- [History](#history)  \n- [Contact](#contact)  \n`\n\nlet md = `\n\n### Technical Roadmap \n\nSecond eventually aims to be a personalized AI, acting as your \"digital butler\" whenever you want to view or exchange data. \n\nFor example, if you want to see photos from friends, your Second fetches all the data from disparate sources and displays photos to you, in whichever format you prefer (list, album, etc). \n\nIn order to provide a personalized experience, your AI needs to know everything about you, and with that level of trust, you should be in complete control of the AI. This is the roadmap to building that AI.  \n\n1. __Simple building blocks__  \nFoundation for a \"communication OS\" that is infinitely upgradeable and can handle any data  \n1. __Collaboration and communication__  \nTooling for sharing apps and data and collaborative improvement of underlying infrastructure  \n1. __Personalization__  \nConsumerization of apps and sharing   \n1. __Bigger and Better Datasets__  \nPublic and private datastores grow with more precise and varied data   \n1. __Better AI__  \nImproved ML algorithms working on better data, user-owned and controlled  \n\n\n#### Stage 1 (Foundation) \n\n~~New filesystem (node = file+directory+validation)~~  \n~~New routing layer~~  \n~~Multi-platform support (cloud, browser, iOS/Android, RPi3)~~  \n\n\n#### Stage 2 (App Platform) \n\n~~Cloud Default App~~  \n~~Browser app: app store and editor~~  \nBrowser/Mobile apps: social sharing (private, customizable twitter/fb)  \nBrowser/Mobile/IoT apps: automation  \nMobile/Iot development guides  \n\n\n#### Stage 3 (Scalability and Adoption) \n\nPlatform change support (platform-as-upgradeable)  \nSecurity reviews  \n\n\n\n\n\n### Team \n\nWe're a small team with great advisors, based in San Francisco. \n\n\n### History \n\nWe began working on the idea for Second in 2013. In early 2018 alpha software was released with the core concepts and fundamentals (identity, language, hosting). \n\n\n### Contact \n\nRequests may be directed to nick@getasecond.com \n\n\n---- \n\nIcon created by iconomania from Noun Project\n\n----  \n\n`\n      try {\n        \n        let marked = universe.require('marked');\n        htmlMenu = marked(menuMd);\n        htmlMain = marked(md);\n        \n        \n      }catch(err){\n        // marked doesn't exist yet \n        // - requires installation! \n        // - TODO: move to \"dependencies\" on code, install at runtime \n        \n        if(universe.checkPackage('marked').errorInstalling){\n          htmlMain = 'FAILED installing package!';\n        } else {\n          htmlMain = 'Please wait while packages are installed';\n          \n          (async function(){\n            \n            // let installed = await installPackage('left-pad');\n            let installed = await universe.installPackage('marked');\n            if(installed){\n              console.log('Installed!');\n            } else {\n              console.log('Failed installation');\n            }\n          })()\n          \n        }\n        \n        // installPackage('is-fqdn');\n        // installPackage('marked');\n        \n        \n        // console.error('failed1err:', err);\n        // htmlFromMd = 'failed1';\n      }\n      // console.log('markedInstalled:', markedInstalled);\n      \n      // let marked = universe.require('marked');\n      \n      // let htmlFromMd = marked('testing html from marked');\n      \n      \n      let page = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <title>Second</title>\n            \n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\" />\n            \n            <style>\n              .container {\n                max-width: 960px;\n              }\n            </style>\n            \n          </head>\n          <body>\n                  \n            \n            <div class=\"container\">\n              <br />\n              <div class=\"links\">\n                <a href=\"/\">Home</a>\n                &nbsp;|&nbsp;\n                <a href=\"/about\">About</a>\n                &nbsp;|&nbsp;\n                <a href=\"/developers\">Developers</a>\n              </div>\n              <hr />\n            </div>\n            \n            <div class=\"container\">\n              <div class=\"columns\">\n                <div class=\"column is-3\">\n                  <div class=\"content\">\n                    ${htmlMenu}\n                  </div>\n                </div>\n                <div class=\"column is-9\">\n                  <div class=\"content\">\n                    ${htmlMain}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n          </body>\n        </html>\n      `;\n\n      await universe.httpResponse('send', page); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}