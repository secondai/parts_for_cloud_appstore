{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "8a1aec75-e403-4e69-84ad-da2fa3652758",
    "code": "(()=>{\n  \n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // Collective intelligence and cooperative to everyone's benefit \n      // - behave intelligently, use better tools \n      \n      // simple multi-page: INPUT.data.req.path\n      \n      // A modern toolbox for the internet DIYer\n      \n\n// &nbsp;\n\n// #### Alpha Walkthru Video \n\n// <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ms5CQfdc94M\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n  \n// ----\n\n// \"Modern\" Toolbox sounds better? \n\n\n// - set up a simple Markdown webpage \n// - process webhooks from a remote service  \n// - create a personal bookmark list  \n// - run tasks at a certain time of day  \n// - control a Raspberry Pi  \n// - deploy a mobile app  \n// - ...and just about anything else!  \n\n\n// Creating new apps for others used to be easy (\"just view-source!\", and all \"apps\" were equal. Today, the bar for quality is much higher, and creating apps can be exhausting for new developers. \n\n// Second is a platform to help you quickly build, deploy, and share personalized tools and apps. By making data sharing smoother, everyone benefits from shared knowledge and technological advances. \n\nlet md = `\n\n### Second \n##### The last App Store you'll ever need  \n\nSecond is a platform for building and sharing small, customizable apps. \n\n- Create your own searchable database of apps  \n- Schedule apps to run in the future, repeatedly, or when triggered  \n- Easily deploy apps to any of your devices, or to the cloud  \n- Customize literally anything (self-hosted)  \n\nNo local install required; everything runs in the cloud, on your own servers (no technical knowledge required). \n\n\n---- \n\n\n#### More Information  \n\nSee the [technical roadmap](/about#technical-roadmap), [contact us](/about#contact), or [launch your own Second](/launch).  \n\n&nbsp;\n&nbsp;\n\n\n`\n\n// ---- \n\n// #### Who is it for? \n\n// __Developers__ \n\n// __Offices__  \n\n// <a class=\"button is-info\" href=\"/toolbox\">Visit Toolbox</a>\n// &nbsp;\n// <a class=\"button is-default\" href=\"/cloud\">Launch New Personal Second</a>\n\n      // Load partial\n      let headerHtml = '';\n      try {\n        let partialNodes = await universe.searchMemory({\n          cache: 'html_partials_header',\n          filter: {\n            sqlFilter: {\n              // nodeId: null // OLD: root-level\n              type: 'html_partial:Qmslfkj299023fjfs',\n              data: {\n                key: 'header'\n              }\n            },\n          }\n        });\n        let headerHtmlCodeNode = partialNodes[0].nodes.find(node=>{return node.type == 'code:0.0.1:local:32498h32f2'});\n        let htmlResultNode = await universe.runNodeCodeInVM({\n          codeNode: headerHtmlCodeNode,\n          dataNode: {}\n        });\n        headerHtml = htmlResultNode.data.html;\n      }catch(err){\n        console.error('Failed partial:', err);\n      }\n\n      try {\n        \n        let marked = universe.require('marked');\n        htmlFromMd = marked(md);\n        \n        \n      }catch(err){\n        // marked doesn't exist yet \n        // - requires installation! \n        // - TODO: move to \"dependencies\" on code, install at runtime \n        \n        if(universe.checkPackage('marked').errorInstalling){\n          htmlFromMd = 'FAILED installing package!';\n        } else {\n          htmlFromMd = 'Please wait while packages are installed';\n          \n          (async function(){\n            let installed = await universe.installPackage('marked');\n            if(installed){\n              console.log('Installed!');\n            } else {\n              console.log('Failed installation');\n            }\n          })()\n          \n        }\n      }\n      \n      \n      \n      let page = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <title>Second Homepage</title>\n            \n            <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n            \n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\" />\n            \n            <style>\n              .container {\n                max-width: 960px;\n              }\n            </style>\n            \n          </head>\n          <body>\n            \n            ${headerHtml}\n            \n            <div class=\"container\">\n              <div class=\"content\">\n                ${htmlFromMd}\n              </div>\n            </div>\n            \n          </body>\n        </html>\n      `;\n\n      await universe.httpResponse('send', page); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}