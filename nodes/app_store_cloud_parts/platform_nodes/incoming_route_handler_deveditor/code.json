{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "8a1aec75-e403-4e69-84ad-da2fa3652758",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // TODO: \n      // - Toolbox is auth mix of App Store and Metadatas: \n      // - SetupComponent should have SetupConnection, connects to Second, then does processLogin separately (with u/p or google)  \n      // - create run_authenticated_request_sequence action (pass token outside of sequence as node) \n      //   - separate actions from auth? (already separate \"data.actions\" array?)\n      \n      \n      console.log('--incoming_route_handler: Toolbox app--');\n      \n      // Get internal Identity node (how to locate myself) \n      // - does NOT provide auth \n      \n      let privateIdentityData = {};\n      let connectionMethodNodeData = {}\n      try {\n        let identityNodes = await universe.searchMemory({\n          cache: 'internal_private_identity',\n          filter: {\n            sqlFilter: {\n              // nodeId: null // OLD: root-level\n              type: 'identity_private:0.0.1:local:3298f2j398233',\n            },\n          }\n        });\n        privateIdentityData = identityNodes[0].data;\n        let connectionMethodNode = identityNodes[0].nodes.find(node=>{return node.type == 'private_identity_connect_method:0.0.1:local:9081j29h3'});\n        connectionMethodNodeData = connectionMethodNode.data;\n      }catch(err){\n        console.error('Failed private identity finding:', err);\n      }\n      \n      let identityNode = {  \n         \"type\":\"external_identity:0.0.1:local:8982f982j92\",\n         \"data\":{  \n            \"identity\": privateIdentityData.identity,\n            \"publicKey\": privateIdentityData.public,\n         },\n         \"nodes\":[  \n            {  \n               \"type\":\"external_identity_connect_method:0.0.1:local:382989239hsdfmn\",\n               \"data\": connectionMethodNodeData,\n            }\n         ]\n      };\n      \n      identityNode = Buffer.from(JSON.stringify(identityNode)).toString('base64');\n              \n      let page = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <title>DevEditor</title>\n            \n            <!--<link href=\"https://fonts.googleapis.com/css?family=Inconsolata\" rel=\"stylesheet\">-->\n        \n            <script src=\"https://unpkg.com/ipfs/dist/index.min.js\"></script>\n            \n            <link href=\"https://browserapp.getasecond.com/css/main.css?_=${Date.now()}\" rel=\"stylesheet\">\n            <!-- <link href=\"https://browserapp.getasecond.com/static/css/main.53760f28.css\" rel=\"stylesheet\">-->\n            \n            <script defer src=\"https://use.fontawesome.com/releases/v5.0.13/js/all.js\" integrity=\"sha384-xymdQtn1n3lH2wcu0qhcdaOpQwyoarkgLVxC/wZ5q7h9gHtxICrpcaSUfygqZGOe\" crossorigin=\"anonymous\"></script>\n            \n          </head>\n          <body>\n            <div id=\"root\"></div>\n            <!-- Supply platform to load -->\n            <!-- Supply environment to load into platform (.zip, github link, or internal app) -->\n            <script type=\"text/javascript\">\n              window.limitedToAppName = 'Developer Editor';\n              window.useLastOfAppId = 'deveditor';\n              // window.limitedToAppZip = 'https://github.com/secondai/app_deveditor';\n              window.limitedToAppZip = '/appzip?appId=deveditor'; // local url \n              window.limitedToAppVersion = 1; \n              window.disallowAutoLaunchCancel = false; // should prevent the \"Startup...\" from even showing...\n              window.startupDelay = 2000;\n              window.appBaseUrl = '/deveditor';\n              \n              window.defaultExternalIdentityNode = JSON.parse(atob(\"${identityNode}\"));\n            \n            </script>\n            <script type=\"text/javascript\" src=\"https://getasecond.com/cdn/defaultplatform/0.1.0/main.js?_=27\"></script>\n          </body>\n        </html>\n      `;\n\n      await universe.httpResponse('send', page); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}