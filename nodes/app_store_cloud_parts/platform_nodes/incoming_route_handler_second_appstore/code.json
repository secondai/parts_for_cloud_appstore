{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "8a1aec75-e403-4e69-84ad-da2fa3652758",
    "code": "(()=>{\n  \n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // simple multi-page: INPUT.data.req.path\n      \n      // Load Apps (temporary, should use a real app, or API requests) \n      // - app_base \n      // - also load app_parts where allowed? \n      \n      let cacheAppId = universe.getParentRoot(SELF)._id;\n      let cache = ['internal_apps_list', cacheAppId].join('|');\n      \n      // app root-level (old: global-root) \n      let appBaseNodes = await universe.searchMemory({\n        cache,\n        filter: {\n          sqlFilter: {\n            type: 'app_base:Qmtesting'\n          },\n        }\n      })\n      \n      // let htmlHeader = await renderPartial();\n      \n      let htmlMenu = '';\n      let htmlMain1 = '';\n      let htmlMain2 = '';\n      \nlet menuMd = appBaseNodes.map(node=>{\n  return `- [${node.data.name}](#${node.data.name.toLowerCase().replace(/[^\\w]+/g, '-')})  `\n}).join('\\n');\n\nlet md1 = `\n### App Store   \n\nThis is a list of the apps currently available on this Second \n\n---- \n`;\nlet md2 = appBaseNodes.map(node=>{\n  return `\n### ${node.data.name} \n\nAppId: ${node.data.appId}  \nVersion: ${node.data.version}  \nGitHub: [${node.data.owner}/${node.data.repo}](https://github.com/${node.data.owner}/${node.data.repo})  \n\nRelease: ${node.data.release}  \nRelease Notes : ${node.data.releaseNotes}  \n\n\n`\n}).join('\\n');\n\n\n      try {\n        \n        let marked = universe.require('marked');\n        htmlMenu = marked(menuMd);\n        htmlMain1 = marked(md1);\n        htmlMain2 = marked(md2);\n        \n        \n      }catch(err){\n        // marked doesn't exist yet \n        // - requires installation! \n        // - TODO: move to \"dependencies\" on code, install at runtime \n        \n        if(universe.checkPackage('marked').errorInstalling){\n          htmlMain1 = 'FAILED installing package!';\n        } else {\n          htmlMain1 = 'Please wait while packages are installed';\n          \n          (async function(){\n            let installed = await universe.installPackage('marked');\n            if(installed){\n              console.log('Installed!');\n            } else {\n              console.log('Failed installation');\n            }\n          })()\n          \n        }\n      }\n      \n      \n      let page = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <title>Second</title>\n            \n            <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n            \n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\" />\n            \n            <style>\n              .container {\n                max-width: 960px;\n              }\n            </style>\n            \n          </head>\n          <body>\n                  \n            \n            <div class=\"container\">\n              <br />\n              <div class=\"links\">\n                <a href=\"/\">Home</a>\n                &nbsp;|&nbsp;\n                <a href=\"/about\">About</a>\n                &nbsp;|&nbsp;\n                <a href=\"/developers\">Developers</a>\n                &nbsp;|&nbsp;\n                <a href=\"/appstore\">Store</a>\n              </div>\n              <hr />\n            </div>\n            \n            <div class=\"container\">\n              <div class=\"content\">\n                ${htmlMain1}\n              </div>\n              <div class=\"columns\">\n                <div class=\"column is-4\">\n                  <div class=\"content\">\n                    ${htmlMenu}\n                  </div>\n                </div>\n                <div class=\"column is-8\">\n                  <div class=\"content\">\n                    ${htmlMain2}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n          </body>\n        </html>\n      `;\n\n      await universe.httpResponse('send', page); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}